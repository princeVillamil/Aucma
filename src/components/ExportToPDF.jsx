import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import { getAuth } from "firebase/auth";

export async function downloadChartsAsPDF(
  containerId = "export-all-charts",
  currentPage = ""
) {
  const allowedPages = ["maintenancerequests"];
  const normalizedPage = currentPage.toLowerCase().replace(/\s+/g, "").trim();

  if (!allowedPages.includes(normalizedPage)) {
    alert(`PDF export is not available for the "${currentPage}" page.`);
    return;
  }

  const now = new Date();
  const formattedDate = now.toLocaleString();
  const currentUser = getAuth().currentUser;
  const generatedBy =
    currentUser?.displayName || currentUser?.email || "Anonymous";

  const pdf = new jsPDF("p", "mm", "a4");
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 10;
  const contentWidth = pageWidth - 2 * margin;

  //Render Charts
  const chartEl = document.getElementById(containerId);
  if (!chartEl) return alert("Chart container not found.");

  const chartCanvas = await html2canvas(chartEl, { scale: 2 });
  const chartImgData = chartCanvas.toDataURL("image/png");

  const chartImgProps = pdf.getImageProperties(chartImgData);
  const chartHeight =
    (chartImgProps.height * contentWidth) / chartImgProps.width;

  const chartPageHeightPx =
    ((pageHeight - 40) * chartCanvas.width) / contentWidth;
  const chartPageCount = Math.ceil(chartCanvas.height / chartPageHeightPx);

  pdf.setFontSize(10);
  pdf.text(`Generated on: ${formattedDate}`, margin, 10);

  for (let i = 0; i < chartPageCount; i++) {
    if (i > 0) pdf.addPage();

    const chartCropCanvas = document.createElement("canvas");
    chartCropCanvas.width = chartCanvas.width;
    chartCropCanvas.height = Math.min(
      chartPageHeightPx,
      chartCanvas.height - i * chartPageHeightPx
    );

    const chartCtx = chartCropCanvas.getContext("2d");
    chartCtx.drawImage(
      chartCanvas,
      0,
      i * chartPageHeightPx,
      chartCanvas.width,
      chartCropCanvas.height,
      0,
      0,
      chartCanvas.width,
      chartCropCanvas.height
    );

    const croppedChartData = chartCropCanvas.toDataURL("image/png");

    pdf.addImage(
      croppedChartData,
      "PNG",
      margin,
      20,
      contentWidth,
      (chartCropCanvas.height * contentWidth) / chartCanvas.width
    );

    pdf.text(
      `Page ${i + 1} | Generated by: ${generatedBy}`,
      margin,
      pageHeight - 10
    );
  }

  //Render Table
  const tableEl = document.getElementById("export-only-table");

  if (
    !tableEl ||
    tableEl.offsetWidth === 0 ||
    tableEl.offsetHeight === 0 ||
    window.getComputedStyle(tableEl).display === "none"
  ) {
    return alert("Table container not found or is not visible.");
  }

  const originalDisplay = tableEl.style.display;
  tableEl.style.display = "block";

  if (typeof setPrintModeGlobal === "function") {
    setPrintModeGlobal(true);
    await new Promise((res) => setTimeout(res, 500));
  }

  const tableCanvas = await html2canvas(tableEl, { scale: 2 });

  if (typeof setPrintModeGlobal === "function") {
    setPrintModeGlobal(false);
  }

  tableEl.style.display = originalDisplay;

  const tableImgData = tableCanvas.toDataURL("image/png");

  const tableImgProps = pdf.getImageProperties(tableImgData);
  const tablePageHeightPx =
    ((pageHeight - 40) * tableCanvas.width) / contentWidth;
  const tablePageCount = Math.ceil(tableCanvas.height / tablePageHeightPx);

  for (let i = 0; i < tablePageCount; i++) {
    pdf.addPage();

    const tableCropCanvas = document.createElement("canvas");
    tableCropCanvas.width = tableCanvas.width;
    tableCropCanvas.height = Math.min(
      tablePageHeightPx,
      tableCanvas.height - i * tablePageHeightPx
    );

    const tableCtx = tableCropCanvas.getContext("2d");
    tableCtx.drawImage(
      tableCanvas,
      0,
      i * tablePageHeightPx,
      tableCanvas.width,
      tableCropCanvas.height,
      0,
      0,
      tableCanvas.width,
      tableCropCanvas.height
    );

    const croppedTableData = tableCropCanvas.toDataURL("image/png");

    pdf.addImage(
      croppedTableData,
      "PNG",
      margin,
      20,
      contentWidth,
      (tableCropCanvas.height * contentWidth) / tableCanvas.width
    );

    pdf.text(
      `Page ${chartPageCount + i + 1} | Generated by: ${generatedBy}`,
      margin,
      pageHeight - 10
    );
  }

  //Save
  pdf.save(`report-${now.toISOString().slice(0, 10)}.pdf`);
}
